worker_processes auto; # No. of cpu

user web users;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
# pid /tmp/nginx.pid;
error_log /yourpath/logs/nginx/nginx.error.log;

events {
  worker_connections 4096; # increase if you have lots of clients, no. of connections / worker
  # cpu * worker_connections(ulimit -n)
  # accept_mutex on; # set to 'on' if nginx worker_processes > 1
  use epoll; # to enable for Linux 2.6+, I/Ois utilized
  # 'use kqueue;' to enable for FreeBSD, OSX
  multi_accept on; #  accept new connection at one time
}

http {
  include mime.types;

   # -->> Suggested Optimization
   keepalive_timeout 65; # How long a connection in the server statys open
   keepalive_requests 100000; # How many request/connection till closed
   sendfile on; # Optimize serving static file
   tcp_nopush on; # optimize data sending
   tcp_nodelay on; # make tcp send multiple buffers as indv packets

   client_body_buffer_size 128k; # handle client buffer size
   client_max_body_size 4G; # max body buffer size
   large_client_header_buffers 4 32k; # handle the client header size 4 headers with 32k buffers
   output_buffers 1 32k; # size of buffers for reading a response from a disk
   postpone_output 1460; # Postpone data transfer until data to sent is set


   client_body_timeout 3m; # time a server will wait for body to be sent
   client_header_timeout 3m; # time a server will wait for a header to be sent, exceeds = 408
   send_timeout 3m; # if client doesnt read any data for given time, close connection

   open_file_cache max=1000 inactive=20s; # cache 1k files ,exclude 20s inactive files
   open_file_cache_valid 30s; # cache file for 30s
   open_file_cache_min_uses 5; # cache  files accessed for min 5 times
   open_file_cache_errors off;

   # Compression
   gzip on;
   gzip_vary on;
   gzip_min_length 10240;
   gzip_proxied expired no-cache no-store private auth;
   gzip_buffers 4 4k;
   gzip_types application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/svg+xml image/vnd.microsoft.icon;
   gzip_disable "MSIE [1-6]\.";

   # -->>

  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /yourpath/logs/nginx/nginx.access.log;

  upstream app_server {
    # weight for load balancing request, default 1,  greater = more request
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response
    # for UNIX domain socket setups
     server unix:/yourpath/run/gunicorn.sock fail_timeout=20;
    # for a TCP configuration
    # server 127.0.0.1:8000 fail_timeout=0;
   }

   upstream websocket {
      server  unix:/yourpath/run/daphne.sock fail_timeout=20;
   }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    server_name _;
    return 301 https://$server_name$request_uri;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 443 ssl default_server;
    # set the correct host(s) for your site
    server_name _;

    charset utf-8;



    # path for static files
    location /static/ {
      expires 365d;
      alias /yourpath/staticfiles/;
      # checks for static file, if not found proxy to app
      #try_files $uri @proxy_to_app;
    }

    location /media/ {
	    alias /yourpath/web/media/;
      # checks for static file, if not found proxy to app
      #try_files $uri @proxy_to_app;
    }

    location /botlog/socket/ {
        try_files $uri @proxy_to_channel_app;
    }

    location / {
    	try_files $uri @proxy_to_app;
    }

    location @proxy_to_channel_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        # enable this if and only if you use HTTPS
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;

        # web socket setup
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'Upgrade';

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://websocket;

    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      # enable this if and only if you use HTTPS
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;


      # -->> Suggested optimization
      proxy_connect_timeout 90;
      proxy_send_timeout 90;
      proxy_read_timeout 90;
      proxy_buffer_size 4k;
      proxy_buffers 4 32k;
      proxy_busy_buffers_size 64k;
      proxy_temp_file_write_size 64k;
      proxy_temp_path /etc/nginx/proxy_temp;
    }

    # cache these files
    #location ~* .(woff|eot|ttf|svg|mp4|webm|jpg|jpeg|png|gif|ico|css|js)$ {
    #	expires 365d;
    #}


    error_page 500 502 503 504; #/500.html;
    location = /500.html {
    	root /yourpath/staticfiles/;
    }

    # -->> Security related setup
    # Can be also set in django settings
    # add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Public-Key-Pins 'pin-sha256="klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY="; pin-sha256="633lt352PKRXbOwf4xSEa1M517scpD3l5f79xMD9r9Q="; max-age=2592000; includeSubDomains';
    ssl on;
    ssl_certificate /yourpath/certificates/domain.crt;
    ssl_certificate_key /yourpath/certificates/domain.key;
    # CA signed certificate example
    # ssl_trusted_certificate /etc/nginx/ssl/example.com/ca-certs.pem;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_session_cache shared:SSL:10m;
    ssl_dhparam /yourpath/certificates/dhparam.pem;

    # -->> Set on if you have CA verified certificate
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # --> End security



  }
}